{
	"info": {
		"_postman_id": "783c4282-a8b6-4168-ab71-39291e6dd192",
		"name": "Oyinuah-DelveApiTask9",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42395308",
		"_collection_link": "https://restless-shuttle-586259.postman.co/workspace/3d51fd9c-56c8-40e4-b994-e431d281ed09/collection/42395308-783c4282-a8b6-4168-ab71-39291e6dd192?action=share&source=collection_link&creator=42395308"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "UserRegistration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the status code is 201\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body indicates user registered\", function () {\r",
									"    pm.expect(response.message.toLowerCase()).to.include(\"user created\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Lists of common English first and last names\r",
									"const firstNames = [\r",
									"    \"James\", \"Mary\", \"John\", \"Patricia\", \"Robert\", \"Jennifer\", \r",
									"    \"Michael\", \"Linda\", \"William\", \"Elizabeth\", \"David\", \"Susan\", \r",
									"    \"Joseph\", \"Margaret\", \"Charles\", \"Jessica\", \"Thomas\", \"Sarah\"\r",
									"];\r",
									"\r",
									"const lastNames = [\r",
									"    \"Smith\", \"Johnson\", \"Brown\", \"Taylor\", \"Wilson\", \"Davis\", \r",
									"    \"Clark\", \"Lewis\", \"Walker\", \"Hall\", \"Allen\", \"Young\", \r",
									"    \"King\", \"Wright\", \"Scott\", \"Green\", \"Adams\", \"Baker\"\r",
									"];\r",
									"\r",
									"// Character sets for password\r",
									"const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"const specialChars = \"!@#$%^&*()_+-=[]{}|;:,.<>?\";\r",
									"const numbers = \"0123456789\";\r",
									"\r",
									"// Function to pick a random item from an array or string\r",
									"function getRandomItem(source) {\r",
									"    return source[Math.floor(Math.random() * source.length)];\r",
									"}\r",
									"\r",
									"// Generate a random email (e.g., john.smith123@example.com)\r",
									"const firstName = getRandomItem(firstNames);\r",
									"const lastName = getRandomItem(lastNames);\r",
									"const randomNumber = Math.floor(Math.random() * 1000);\r",
									"const randomEmail = `${firstName.toLowerCase()}.${lastName.toLowerCase()}${randomNumber}@example.com`;\r",
									"\r",
									"// Generate a random password (e.g., 12 characters with upper, lower, and special)\r",
									"let randomPassword = [\r",
									"    getRandomItem(lowercase),    // Ensure at least 1 lowercase\r",
									"    getRandomItem(uppercase),    // Ensure at least 1 uppercase\r",
									"    getRandomItem(specialChars), // Ensure at least 1 special character\r",
									"    getRandomItem(numbers)       // Ensure at least 1 number\r",
									"].join(\"\"); // Start with \"aB!1\"\r",
									"\r",
									"// Add 8 more random characters from all sets\r",
									"const allChars = lowercase + uppercase + specialChars + numbers;\r",
									"for (let i = 0; i < 8; i++) {\r",
									"    randomPassword += getRandomItem(allChars);\r",
									"}\r",
									"\r",
									"// Shuffle the password to randomize character positions\r",
									"randomPassword = randomPassword.split('').sort(() => Math.random() - 0.5).join('');\r",
									"\r",
									"// Set environment variables\r",
									"pm.environment.set(\"randomEmail\", randomEmail);\r",
									"pm.environment.set(\"randomPassword\", randomPassword);\r",
									"\r",
									"// Log the values for debugging\r",
									"console.log(\"Generated Email: \" + randomEmail);\r",
									"console.log(\"Generated Password: \" + randomPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{randomEmail}}\",\n  \"password\": \"{{randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/register",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserLoginWithValidCredentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response contains tokens and user data\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json.access_token).to.be.a(\"string\");\r",
									"    pm.collectionVariables.set(\"validAccessToken\", json.access_token)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = \"oyinuahsimeni@gmail.com\";\r",
									"const password = \"bobojuice\";\r",
									"const rememberMe = true;\r",
									"\r",
									"// Store variables for use in the request\r",
									"pm.environment.set(\"userEmail\", email);\r",
									"pm.environment.set(\"userPassword\", password);\r",
									"pm.environment.set(\"rememberMe\", rememberMe);\r",
									"\r",
									"console.log(`Generated email: ${email}`);\r",
									"console.log(`Using password: ${password}`);\r",
									"console.log(`Remember me: ${rememberMe}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\",\n    \"remember me\": {{rememberMe}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserTokenRefresh",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{validAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/refresh",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserLoginWithValidCredentials2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Response contains tokens and user data\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json.access_token).to.be.a(\"string\");\r",
									"    pm.collectionVariables.set(\"validAccessToken\", json.access_token)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = \"oyinuahsimeni@gmail.com\";\r",
									"const password = \"bobojuice\";\r",
									"const rememberMe = true;\r",
									"\r",
									"// Store variables for use in the request\r",
									"pm.environment.set(\"userEmail\", email);\r",
									"pm.environment.set(\"userPassword\", password);\r",
									"pm.environment.set(\"rememberMe\", rememberMe);\r",
									"\r",
									"console.log(`Generated email: ${email}`);\r",
									"console.log(`Using password: ${password}`);\r",
									"console.log(`Remember me: ${rememberMe}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\",\n    \"remember me\": {{rememberMe}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserLogout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const id = \"9e5a13f8-6c0d-4d4d-b156-7d4f393150e1\";\r",
									"const email = \"oyinuahsimeni@gmail.com\";\r",
									"\r",
									"\r",
									"// Store variables for use in the request\r",
									"pm.environment.set(\"userID\", id);\r",
									"pm.environment.set(\"userEmail\", email);\r",
									"\r",
									"\r",
									"console.log(`id: ${id}`);\r",
									"console.log(`email: ${email}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{validAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{validAccessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{userID}}\",\r\n    \"email\": \"{{userEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/logout",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserForgotPasswordEmail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = \"oyo006@gmail.com\";\r",
									"\r",
									"pm.environment.set(\"userEmail\", email);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/forgot-password",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserResetPasswordWithValidOTP",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"email\": \"tomiyee@yahoo.com\",\n    \"token\": \"517567\",\n    \"password\": \"newp@ssword01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/reset-forgot-password",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-forgot-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "UserRegisterWithExistingCredential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the status code is 422\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Verify the error message\r",
									"pm.test(\"Response body indicates email is taken\", function () {\r",
									"    pm.expect(response.message.email[0]).to.equal(\"The email has already been taken.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"oyinuahsimeni@gmail.com\",\n    \"password\": \"bobojuice\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/register",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserRegisterWithoutPassword",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Lists of common English first and last names\r",
									"const firstNames = [\r",
									"    \"James\", \"Mary\", \"John\", \"Patricia\", \"Robert\", \"Jennifer\", \r",
									"    \"Michael\", \"Linda\", \"William\", \"Elizabeth\", \"David\", \"Susan\", \r",
									"    \"Joseph\", \"Margaret\", \"Charles\", \"Jessica\", \"Thomas\", \"Sarah\"\r",
									"];\r",
									"\r",
									"const lastNames = [\r",
									"    \"Smith\", \"Johnson\", \"Brown\", \"Taylor\", \"Wilson\", \"Davis\", \r",
									"    \"Clark\", \"Lewis\", \"Walker\", \"Hall\", \"Allen\", \"Young\", \r",
									"    \"King\", \"Wright\", \"Scott\", \"Green\", \"Adams\", \"Baker\"\r",
									"];\r",
									"\r",
									"// Character sets for password\r",
									"const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"const numbers = \"0123456789\";\r",
									"\r",
									"// Function to pick a random item from an array or string\r",
									"function getRandomItem(source) {\r",
									"    return source[Math.floor(Math.random() * source.length)];\r",
									"}\r",
									"\r",
									"// Generate a random email (e.g., john.smith123@example.com)\r",
									"const firstName = getRandomItem(firstNames);\r",
									"const lastName = getRandomItem(lastNames);\r",
									"const randomNumber = Math.floor(Math.random() * 1000);\r",
									"const randomEmail = `${firstName.toLowerCase()}.${lastName.toLowerCase()}${randomNumber}@gmail.com`;\r",
									"\r",
									"// Set password as a single space\r",
									"const emptyPassword = \" \";\r",
									"\r",
									"// Set environment variables\r",
									"pm.environment.set(\"randomEmail\", randomEmail);\r",
									"pm.environment.set(\"emptyPassword\", emptyPassword);\r",
									"\r",
									"// Log the values for debugging\r",
									"console.log(\"Generated Email: \" + randomEmail);\r",
									"console.log(\"Password: '\" + emptyPassword + \"' (single space)\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body indicates that password field cannot be empty\", function () {\r",
									"    pm.expect(response.message.password[0]).to.include(\"required\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{randomEmail}}\",\n  \"password\": \"{{emptyPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/register",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserLoginWithIncorrectPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body indicates credential is invalid\", function () {\r",
									"    pm.expect(response.message.toLowerCase()).to.include(\"invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"tomiyee@yahoo.com\",\n    \"password\": \"P@ssword0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserLoginNonexistingCredentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body indicates the credential has some issues\", function () {\r",
									"    pm.expect(response.message.toLowerCase()).to.include(\"invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"ekeki@gmail.com\",\n    \"password\": \"P@ssword0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserForgotPasswordWithUnregisteredEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body indicates that the Email doesn't have an account\", function () {\r",
									"    pm.expect(response.message).to.include(\"doesn't exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"#oyo006@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/v1/auth/forgot-password",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseurl",
			"value": "https://api.delve.fun",
			"type": "default"
		},
		{
			"key": "validAccessToken",
			"value": "",
			"type": "string"
		}
	]
}